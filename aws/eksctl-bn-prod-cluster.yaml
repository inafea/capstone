AWSTemplateFormatVersion: 2010-09-09
Description: >-
  EKS cluster (dedicated VPC: true, dedicated IAM: true) 
Resources:
  ClusterSharedNodeSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Communication between all nodes in the cluster
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/ClusterSharedNodeSecurityGroup'
      VpcId: !Ref VPC
  ControlPlane:
    Type: 'AWS::EKS::Cluster'
    Properties:
      Name: bn-prod
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref ControlPlaneSecurityGroup
        SubnetIds:
          - !Ref SubnetPublicEUWEST3C
          - !Ref SubnetPublicEUWEST3A
          - !Ref SubnetPublicEUWEST3B
          - !Ref SubnetPrivateEUWEST3C
          - !Ref SubnetPrivateEUWEST3A
          - !Ref SubnetPrivateEUWEST3B
      RoleArn: !GetAtt ServiceRole.Arn
      Version: '1.14'
  ControlPlaneSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Communication between the control plane and worker nodegroups
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/ControlPlaneSecurityGroup'
      VpcId: !Ref VPC
  IngressInterNodeGroupSG:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Allow nodes to communicate with each other (all ports)
      FromPort: 0
      GroupId: !Ref ClusterSharedNodeSecurityGroup
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref ClusterSharedNodeSecurityGroup
      ToPort: 65535
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/InternetGateway'
  NATGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt NATIP.AllocationId
      SubnetId: !Ref SubnetPublicEUWEST3C
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/NATGateway'
  NATIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  NATPrivateSubnetRouteEUWEST3A:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
      RouteTableId: !Ref PrivateRouteTableEUWEST3A
  NATPrivateSubnetRouteEUWEST3B:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
      RouteTableId: !Ref PrivateRouteTableEUWEST3B
  NATPrivateSubnetRouteEUWEST3C:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
      RouteTableId: !Ref PrivateRouteTableEUWEST3C
  PolicyCloudWatchMetrics:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'cloudwatch:PutMetricData'
            Effect: Allow
            Resource: '*'
        Version: 2012-10-17
      PolicyName: !Sub '${AWS::StackName}-PolicyCloudWatchMetrics'
      Roles:
        - !Ref ServiceRole
  PolicyNLB:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'elasticloadbalancing:*'
              - 'ec2:CreateSecurityGroup'
              - 'ec2:Describe*'
            Effect: Allow
            Resource: '*'
        Version: 2012-10-17
      PolicyName: !Sub '${AWS::StackName}-PolicyNLB'
      Roles:
        - !Ref ServiceRole
  PrivateRouteTableEUWEST3A:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/PrivateRouteTableEUWEST3A'
      VpcId: !Ref VPC
  PrivateRouteTableEUWEST3B:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/PrivateRouteTableEUWEST3B'
      VpcId: !Ref VPC
  PrivateRouteTableEUWEST3C:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/PrivateRouteTableEUWEST3C'
      VpcId: !Ref VPC
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/PublicRouteTable'
      VpcId: !Ref VPC
  PublicSubnetRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
  RouteTableAssociationPrivateEUWEST3A:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTableEUWEST3A
      SubnetId: !Ref SubnetPrivateEUWEST3A
  RouteTableAssociationPrivateEUWEST3B:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTableEUWEST3B
      SubnetId: !Ref SubnetPrivateEUWEST3B
  RouteTableAssociationPrivateEUWEST3C:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTableEUWEST3C
      SubnetId: !Ref SubnetPrivateEUWEST3C
  RouteTableAssociationPublicEUWEST3A:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetPublicEUWEST3A
  RouteTableAssociationPublicEUWEST3B:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetPublicEUWEST3B
  RouteTableAssociationPublicEUWEST3C:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetPublicEUWEST3C
  ServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonEKSServicePolicy'
        - 'arn:aws:iam::aws:policy/AmazonEKSClusterPolicy'
  SubnetPrivateEUWEST3A:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: us-east-2a
      CidrBlock: 192.168.128.0/19
      Tags:
        - Key: kubernetes.io/role/internal-elb
          Value: '1'
        - Key: Name
          Value: !Sub '${AWS::StackName}/SubnetPrivateEUWEST3A'
      VpcId: !Ref VPC
  SubnetPrivateEUWEST3B:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: us-east-2b
      CidrBlock: 192.168.160.0/19
      Tags:
        - Key: kubernetes.io/role/internal-elb
          Value: '1'
        - Key: Name
          Value: !Sub '${AWS::StackName}/SubnetPrivateEUWEST3B'
      VpcId: !Ref VPC
  SubnetPrivateEUWEST3C:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: us-east-2c
      CidrBlock: 192.168.96.0/19
      Tags:
        - Key: kubernetes.io/role/internal-elb
          Value: '1'
        - Key: Name
          Value: !Sub '${AWS::StackName}/SubnetPrivateEUWEST3C'
      VpcId: !Ref VPC
  SubnetPublicEUWEST3A:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: us-east-2a
      CidrBlock: 192.168.32.0/19
      Tags:
        - Key: kubernetes.io/role/elb
          Value: '1'
        - Key: Name
          Value: !Sub '${AWS::StackName}/SubnetPublicEUWEST3A'
      VpcId: !Ref VPC
  SubnetPublicEUWEST3B:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: us-east-2b
      CidrBlock: 192.168.64.0/19
      Tags:
        - Key: kubernetes.io/role/elb
          Value: '1'
        - Key: Name
          Value: !Sub '${AWS::StackName}/SubnetPublicEUWEST3B'
      VpcId: !Ref VPC
  SubnetPublicEUWEST3C:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: us-east-2c
      CidrBlock: 192.168.0.0/19
      Tags:
        - Key: kubernetes.io/role/elb
          Value: '1'
        - Key: Name
          Value: !Sub '${AWS::StackName}/SubnetPublicEUWEST3C'
      VpcId: !Ref VPC
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 192.168.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/VPC'
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
Outputs:
  ARN:
    Export:
      Name: !Sub '${AWS::StackName}::ARN'
    Value: !GetAtt ControlPlane.Arn
  CertificateAuthorityData:
    Value: !GetAtt ControlPlane.CertificateAuthorityData
  ClusterStackName:
    Value: !Ref 'AWS::StackName'
  Endpoint:
    Export:
      Name: !Sub '${AWS::StackName}::Endpoint'
    Value: !GetAtt ControlPlane.Endpoint
  FeatureNATMode:
    Value: Single
  SecurityGroup:
    Export:
      Name: !Sub '${AWS::StackName}::SecurityGroup'
    Value: !Ref ControlPlaneSecurityGroup
  ServiceRoleARN:
    Export:
      Name: !Sub '${AWS::StackName}::ServiceRoleARN'
    Value: !GetAtt ServiceRole.Arn
  SharedNodeSecurityGroup:
    Export:
      Name: !Sub '${AWS::StackName}::SharedNodeSecurityGroup'
    Value: !Ref ClusterSharedNodeSecurityGroup
  SubnetsPrivate:
    Export:
      Name: !Sub '${AWS::StackName}::SubnetsPrivate'
    Value: !Join 
      - ','
      - - !Ref SubnetPrivateEUWEST3C
        - !Ref SubnetPrivateEUWEST3A
        - !Ref SubnetPrivateEUWEST3B
  SubnetsPublic:
    Export:
      Name: !Sub '${AWS::StackName}::SubnetsPublic'
    Value: !Join 
      - ','
      - - !Ref SubnetPublicEUWEST3C
        - !Ref SubnetPublicEUWEST3A
        - !Ref SubnetPublicEUWEST3B
  VPC:
    Export:
      Name: !Sub '${AWS::StackName}::VPC'
    Value: !Ref VPC
